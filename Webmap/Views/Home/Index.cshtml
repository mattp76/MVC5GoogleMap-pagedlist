@using Webmap.Models
@using PagedList.Mvc;
@using PagedList;
@using System.Configuration;
@model IEnumerable<MapModel>

@{ 
    var isAjaxPaging = Convert.ToBoolean(ConfigurationManager.AppSettings["IsAjaxPaging"]);
}

<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>


<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>
<br />
<br/>
<br/>

<div id="PagedList">
    @Html.Partial("PagedList", Model)
</div>



<!-- This is the div that will contain the Google Map -->
<!--<div id="map_canvas" style="height: 550px;"></div>-->

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {

    <section class="scripts">


         @if (isAjaxPaging)
         {

          <script type="text/javascript">

             $('body').on('click', '#PagedList a', function (event) {


            event.preventDefault();

                     /* var searchString = $('#SearchString').val();
                      if (searchString == undefined || searchString == '') {
                          searchString = '';
                      } else {
                          searchString = '&searchString=' + searchString;
                      }

                      var columnToSort = $(this).text();
                      var currentSortOption = getUrlVars()['sortOption'];
                      console.log(currentSortOption);
                      var sort;
                      switch (currentSortOption) {
                      case "name_acs":
                          sort = 'sortOption=name_desc';
                          break;
                      case "name_desc":
                          sort = 'sortOption=name_acs';
                          break;
                      case "price_acs":
                          sort = 'sortOption=price_desc';
                          break;
                      case "price_desc":
                          sort = 'sortOption=price_acs';
                          break;
                      case "qty_acs":
                          sort = 'sortOption=qty_desc';
                          break;
                      case "qty_desc":
                          sort = 'sortOption=qty_acs';
                          break;
                      default:
                          sort = '';
                          break;
                      }


                      switch (columnToSort) {
                      case 'Name':
                          if (currentSortOption != 'name_acs' && currentSortOption != 'name_desc') {
                              sort = 'sortOption=name_acs';
                          }
                          break;
                      case 'Price':
                          if (currentSortOption != 'price_acs' && currentSortOption != 'price_desc') {
                              sort = 'sortOption=price_acs';
                          }
                          break;
                      case 'Qty':
                          if (currentSortOption != 'qty_acs' && currentSortOption != 'qty_decs') {
                              sort = 'sortOption=qty_acs';
                          }
                          break;
                      default:
                          sort = '';
                          break;

                      }
                      if (sort != '' & searchString != '') {
                          sort = '&' + sort;
                      }*/



                     var url = $(this).attr('href');
                     console.log(url);
            $.ajax({
                         url: url,
                success: function(result) {
                             ChangeUrl('index', url);
                    $('#PagedList').html(result);
                         }
                     });
                     });

             function ChangeUrl(page, url) {
                         if (typeof (history.pushState) != "undefined") {
                             var obj = { Page: page, Url: url };
                         history.pushState(null, obj.Page, obj.Url);
                     } else {
                     alert("Browser does not support HTML5.");
                 }
             }

             function getUrlVars() {
                 var vars = [], hash;
                 var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
                 for (var i = 0; i < hashes.length; i++) {
                     hash = hashes[i].split('=');
                     vars.push(hash[0]);
                     vars[hash[0]] = hash[1];
                 }
                 return vars;
             }
           
          </script>
        }


       <script type="text/javascript">
            $(document).ready(function () {
                Initialize();
            });

            // Where all the fun happens
            function Initialize() {

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                google.maps.visualRefresh = true;
                var Tunisie = new google.maps.LatLng(36.81881, 10.16596);

                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 8,
                    center: Tunisie,
                    mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

                // a sample list of JSON encoded data of places to visit in Tunisia
                // you can either make up a JSON list server side, or call it from a controller using JSONResult
                var data = [
                     { "Id": 1, "PlaceName": "Zaghouan", "GeoLong": "36.401081", "GeoLat": "10.16596" },
                     { "Id": 2, "PlaceName": "Hammamet ", "GeoLong": "36.4", "GeoLat": "10.616667" },
                     { "Id": 3, "PlaceName": "Sousse", "GeoLong": "35.8329809", "GeoLat": "10.63875" },
                     { "Id": 4, "PlaceName": "Sfax", "GeoLong": "34.745159", "GeoLat": "10.7613" }
                ];

                // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
                $.each(data, function (i, item) {
                    var marker = new google.maps.Marker({
                        'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                        'map': map,
                        'title': item.PlaceName
                    });

                    // Make the marker-pin blue!
                    marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

                    // put in some information about each json object - in this case, the opening hours.
                    var infowindow = new google.maps.InfoWindow({
                        content: "<div class='infoDiv'><h2>" + item.PlaceName + "</div></div>"
                    });

                    // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
                    google.maps.event.addListener(marker, 'click', function () {
                        infowindow.open(map, marker);
                    });

                })
            }


        </script>
    </section>
}
